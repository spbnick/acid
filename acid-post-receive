#!/bin/bash

set -o nounset -o pipefail -o errexit

declare -r PROGNAME=`basename "$0"`
declare -r CONF_PFX="acid"

# Output usage information.
function usage()
{
	cat <<EOF
Usage: $PROGNAME MASTER_GIT_DIR
Divert commits submitted to a git post-receive hook to CI.

Arguments:
    MASTER_GIT_DIR  Git directory pushing to which is being imitated.
EOF
}

if [ "$#" != 1 ]; then
    echo "$PROGNAME: Invalid number of arguments" >&2
    usage >&2
    exit 1
fi

declare master_git_dir="$1"

declare url_fmt
url_fmt=`GIT_DIR="$master_git_dir" git config --get "$CONF_PFX.private-url-fmt"` &&
        [ -n "$url_fmt" ] || {
    echo "$PROGNAME: Build trigger URL format is not set" >&2
    exit 1
}

declare rev_old
declare rev_new
declare ref
declare branch
declare -a build_list
declare build
declare rev
declare url

while read -r rev_old rev_new ref; do
    if ! [[ "$ref" =~ ^refs/heads/[^/]+$ ]]; then
        echo "$PROGNAME: Pushing to a non-branch reference: $ref" >&2
        exit 1
    fi
    branch="${ref#refs/heads/}"
    read -r -a build_list < <(
        GIT_DIR="$master_git_dir" \
            git config --get "branch.$branch.$CONF_PFX-build-list"
    )

    while read -r rev; do
        git push --quiet "$master_git_dir" "$rev:refs/private/$rev"
        for build in "${build_list[@]}"; do
            printf -v url "$url_fmt" "$branch" "$build" "$rev" "$USER"
            wget --quiet -O/dev/null -- "$url" >&2
        done
    done < <(
        git rev-list --reverse "^$rev_old" "$rev_new"
    )
done
